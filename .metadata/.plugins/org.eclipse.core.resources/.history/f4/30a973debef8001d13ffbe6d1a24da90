package com.anytime.developer.error;

import java.time.LocalDateTime;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.context.request.WebRequest;
import org.springframework.web.servlet.NoHandlerFoundException;

@ControllerAdvice
public class GlobalErrorHandler {
	
	
	
	@ExceptionHandler(NoHandlerFoundException.class)
	public ResponseEntity<MyError> exceptions(NoHandlerFoundException er, WebRequest req){
		 
		
		MyError err = new MyError(LocalDateTime.now(), er.getMessage(), req.getDescription(false));
		return new ResponseEntity<MyError>(err, HttpStatus.FORBIDDEN);
	}
	
	
	@ExceptionHandler(StudentExceptions.class)
	public ResponseEntity<MyError> exceptions(StudentExceptions er, WebRequest req){
		 
		
		MyError err = new MyError(LocalDateTime.now(), er.getMessage(), req.getDescription(false));
		return new ResponseEntity<MyError>(err, HttpStatus.FORBIDDEN);
	}
	
	@ExceptionHandler(StudentExceptions.class)
	public ResponseEntity<MyError> exceptions(StudentExceptions er, WebRequest req){
		 
		
		MyError err = new MyError(LocalDateTime.now(), er.getMessage(), req.getDescription(false));
		return new ResponseEntity<MyError>(err, HttpStatus.FORBIDDEN);
	}
	
	@ExceptionHandler(MethodArgumentNotValidException.class)
	public ResponseEntity<MyError> myMANVExceptionHandler(MethodArgumentNotValidException me)  {
	
		
          MyError err=new MyError(LocalDateTime.now(),"Validation Error",me.getBindingResult().getFieldError().getDefaultMessage());

		return new ResponseEntity<>(err,HttpStatus.BAD_REQUEST);
			
	}
	
	
	
	

}
