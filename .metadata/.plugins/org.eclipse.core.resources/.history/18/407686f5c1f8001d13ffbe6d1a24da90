package com.anytime.developer.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.repository.query.Param;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.service.annotation.PutExchange;

import com.anytime.developer.model.Student;
import com.anytime.developer.service.StudentService;

import jakarta.validation.Valid;

@RestController
public class StudentController {
	
	
	@Autowired
	public StudentService stService;
	
	@PostMapping("student")
	private ResponseEntity<Student>  addStudent(@Valid @RequestBody Student st){
		    Student st1 =    stService.createStudent(st);
		 	return new ResponseEntity<>(st1, HttpStatus.CREATED);
	}
	
	@GetMapping("student")
	private ResponseEntity<List<Student>>  getStudents(){
		    List<Student> st1 =    stService.getAllStudent();
		 	return new ResponseEntity<>(st1, HttpStatus.OK);
	}
	
	
	@GetMapping("student/{id}")
	private ResponseEntity<Student>  getStudent(@PathVariable Integer id	){
		    Student st1 =    stService.getStudentById(id);
		 	return new ResponseEntity<>(st1, HttpStatus.CREATED);
	}
	
	@PutMapping("student")
	private ResponseEntity<Student>  updateStudent(Student st){
		    Student st1 =    stService.updateStudent(st);
		 	return new ResponseEntity<>(st1, HttpStatus.ACCEPTED);
	}
	
	@DeleteMapping("student/{id}")
	private ResponseEntity<Student>  deleteStudent(@PathVariable Integer id){
		    Student st1 =    stService.deleteStudent(id);
		 	return new ResponseEntity<>(st1, HttpStatus.ACCEPTED);
	}
	
	@GetMapping("student/{name}")
	private ResponseEntity<Student>  getStudent(@PathVariable String name){
		    List<Student> st1 =    stService.getStudentByName(name);
		 	return new ResponseEntity<>(st1, HttpStatus.CREATED);
	}
	

}
